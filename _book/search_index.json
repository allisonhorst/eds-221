[["index.html", " EDS 221: SCIENTIFIC PROGRAMMING ESSENTIALS Chapter 1 Scientific programming essentials for environmental data science 1.1 Course introduction 1.2 Links to other course materials 1.3 Course setup 1.4 Course resources", " EDS 221: SCIENTIFIC PROGRAMMING ESSENTIALS by Allison Horst Chapter 1 Scientific programming essentials for environmental data science Material disclaimer and use This book was created by Allison Horst for EDS 221 (Scientific Programming Essentials) in the Bren School’s 1-year Master of Environmental Data Science program at UC Santa Barbara. It accompanies lecture, computational lab and discussion materials that may or may not be linked to throughout the book. This book is intended as a supplemental resource for some parts of the course. In other words, it is not intended as a standalone textbook. All materials in this book are openly available for use and reuse by CC-BY. Thank you in advance for suggestions and corrections, which can be submitted as issue to this GitHub repo. Acknowledgements I create my courses while standing on shoulders of generous teaching and developing giants in R, data science, and education communities. The wealth and quality of open educational resources (OERs) in data science has made teaching in the field fun, innovative, and inspiring. I’ve tried to thoroughly credit authors resources that I have pulled from and adapted for this book, and I welcome additions if I have missed any that should be included. 1.1 Course introduction Figure 1.1: Slide from Dr. Julia Lowndes’ 2019 keynote talk at useR conference (illustration by Allison Horst). As nicely summarized in the title of a 2018 NCEAS post, “the next generation of environmental scientists are data scientists”. Over the next year in MEDS you’ll build skills to responsibly apply advanced methods in environmental modeling, spatial data analysis, machine learning, and more to investigate, analyze and communicate with complex environmental data. To get there, you’ll need a strong foundation in programming basics like: understanding types and structures of data, basic data wrangling and visualization, algorithm development with functions, loops, and conditionals, and how to troubleshoot. While working in the weeds of programming, we’ll also learn and reinforce transferable habits for reproducible workflows, robust file paths, version control, data organization, project management, and more. In EDS 221 you’ll also start building versatility by learning fundamental programming skills in different languages (R, Python) and integrated development environments (IDEs) like RStudio and PyCharm, while documenting our work in R Markdown and Jupyter Notebooks. Upon the building blocks established in EDS 221, you’ll be prepared to incrementally grow your advanced environmental data science toolkit throughout MEDS, then enter the workplace at the leading edge of quantitative methods in the field. 1.2 Links to other course materials Syllabus Code of Conduct Course website 1.3 Course setup We will use the following in EDS 221. You should have pre-installed recent versions before starting the course. R (version XXXXX or higher) RStudio Desktop (version XXXXX or higher) RStudio Cloud (create a free account) Python (version XXXXX or higher) Pycharm (version XXXX or higher) Jupyter () 1.4 Course resources "],["r-py.html", "Chapter 2 Meet the 221 tools 2.1 R 2.2 RStudio 2.3 Python 2.4 Jupyter Notebooks 2.5 Playing nicely together", " Chapter 2 Meet the 221 tools 2.1 R 2.2 RStudio 2.3 Python 2.4 Jupyter Notebooks 2.5 Playing nicely together "],["types.html", "Chapter 3 Data structures and types 3.1 Data structures 3.2 Data types", " Chapter 3 Data structures and types How we work with data is largely dependent on the type and structure of data we’re working with. That’s more than just “is this a number or letters?” We need to understand how the data are stored so that we know how to access pieces of it, how our code will understand and interact with data, and so we’re correctly predicting how data will change based on what we do with it. In this chapter, we’ll learn about different structures of data, and the types of data they can contain. 3.1 Data structures 3.1.1 Vectors 3.1.2 Tibbles 3.1.3 Matrices 3.1.4 Lists 3.2 Data types See: https://r4ds.had.co.nz/vectors.html "],["basic-wrangling.html", "Chapter 4 Basic wrangling", " Chapter 4 Basic wrangling Indexing, subsetting, etc. "],["iteration.html", "Chapter 5 Iteration", " Chapter 5 Iteration Iteration "],["conditionals.html", "Chapter 6 Conditionals", " Chapter 6 Conditionals "],["logicals.html", "Chapter 7 Logicals", " Chapter 7 Logicals "],["functions.html", "Chapter 8 Functions 8.1 Function components 8.2 Writing simple functions 8.3 Functions with conditionals 8.4 Functions with iteration 8.5 Useful function features 8.6 Testing functions 8.7 Iterating functions 8.8 Resources on building, testing, &amp; documenting functions", " Chapter 8 Functions Writing functions to implement algorithms is a fundamental skill for every environmental data scientist. Functions can reduce repetition, increase efficiency and elegance, and facilitate reuse and sharing. Functions built by other developers will be ingrained into your code, but it’s also critical that you can build, test, document, and share your own functions. This chapter covers: Function structure Writing basic functions Nested functions Functions with iteration and conditions Useful function features Testing Documentation Applied examples 8.1 Function components At the most basic level, a function takes an input, does something to it (a calculation, transformation, etc.), and returns an output. For example, we can write a function that doubles the input value. In function notation seen in math, that would be: \\[f(x) = 2x\\] where \\(x\\) is the input, and \\(f(x)\\) is the output. The function \\(f\\) acts on input \\(x\\) by doubling the input value. How can we create a function to do the same thing in R? An R function would look like this: double_it &lt;- function(x) { 2*x } What are these different pieces of that function? function name: Here, the function is named double_it formals: The function(x) piece defines the function formals (arguments / parameters). This function expects a single input argument, x (you can check what the formals are using formals(function_name)). body: here, { 2*x } is the body of the function - that’s where we tell it what to do with the inputs. Note the braces (i.e. squiggly brackets) are often on separate lines from the algorithm itself. Try out the function by inputting both a single value, and a vector of values. Note that vectorization is the default - meaning that the function is applied to each element in a vector. double_it(x = 20) ## [1] 40 vec &lt;- c(2, 4, 50) # Create a vector with multiple values double_it(vec) # Function acts on each element in the vector ## [1] 4 8 100 Those are the main pieces. But don’t worry, it gets a lot more interesting. Let’s start by writing a few of our own functions. 8.1.1 A note on names It’s important to be thoughtful when naming functions. We generally want to follow standard practices for good names (concise, descriptive, code and coder-friendly), but you may also consider the following: - Start with a verb that describes what the function does (e.g. sort, build, predict) - End with a noun describing the thing it works with or creates (e.g. image, model, mass) - Combine them with a coder-friendly case (like lower_snake_case) For example, here are some suggestions that may be useful function names: `sum_imports`, `predict_offsets`, `plot_simulations` In contrast, here are some function names that may be less useful, memorable, and intuitive for you and collaborators: `fun_1`, `calc`, `x2` It is likely that there will be a tradeoff between conciseness and descriptiveness. While there aren’t rules about naming functions, I recommend erring on the side of descriptiveness to make reading and writing code a bit more intuitive. With tab-completion, the decrease in efficiency is minimal. 8.2 Writing simple functions Let’s practice writing a few simple functions using established relationships in environmental science. 8.2.1 Example 1: Fish standard weight “Standard weight” is how much we expect a fish to weigh, give the species and fish length, and the nonlinear relationship is given by: \\[W=aL^b\\] where \\(L\\) is total fish length (centimeters), \\(W\\) is the expected fish weight (grams), and \\(a\\) and \\(b\\) are species-dependent parameter values. Write a function to calculate fish weight based on \\(a\\), \\(b\\), and fish length, then estimate the weight of several fish based on the following parameter estimates for Hawaiian fish from Peyton et al. (2016): Table 8.1: Parameter estimates for selected Hawaiian fish from Peyton et al. (2015). Scientific name Common name a b Chanos chanos Milkfish 0.0905 2.52 Sphyraena barracuda Great barracuda 0.0181 3.27 Caranx ignobilis Giant trevally 0.0353 3.05 Function: predict_weight &lt;- function(a, length, b) { a*(length^b) } Using the function: Estimate the mass of a 160 cm long great barracuda. Estimate the mass of a 118 cm long milkfish. Thinking ahead: Does this pass your smell test for a user-friendly and user-helpful function? How might we make this function simpler for a user? For example, maybe a user can input the species, and the parameters \\(a\\) and \\(b\\) can be correctly sourced from a table? We’ll learn how to add this kind of functionality in upcoming sections. 8.2.2 Example 2: Wind turbines The full power in wind hitting a turbine is: \\[P = 0.5\\rho Av^3\\] where \\(P\\) is power in Watts (joules/second), \\(\\rho\\) is the air density (kg/m3), \\(A\\) is the area covered by the turbine blades (square meters), and \\(v\\) is the wind velocity (m/s). However, the Betz Limit means that turbines can only collect ~60% of the total wind power, which updates the theoretical “collectable” power (before accounting for inefficiencies, losses, etc.) to: \\[P = 0.3\\rho Av^3\\] Write a function to calculate maximum collectable wind power (Watts) by a turbine requiring three inputs: Air density (in kg/m3) Rotor radius (in meters) Wind velocity (in m/s) Write the function: calc_windpower &lt;- function(rho, radius, windspeed) { 0.3*rho*pi*(radius^2)*(windspeed^3) } Can we clean this up a bit by calculating the area first, within the function? Sure! calc_windpower &lt;- function(rho, radius, windspeed) { # Calculate turbine area (meters squared): turbine_area = pi*(radius^2) # Calculate collectable power: 0.3*rho*turbine_area*(windspeed^3) } Now let’s use the function we’ve created. The largest turbine in the world (as of March 2021) is the GE Haliade-X, an offshore turbine prototype in Rotterdam, the Netherlands, with a 220 meter rotor diameter. Assuming a windspeed of 7.7 m/s (based on long-term averages for North sea North Sea platforms from Coelingh, Wijk, and Holtslag (1998)) and an air density of 1.225 kg/m3 (at sea level), estimate the wind power that can be collected. calc_windpower(rho = 1.225, radius = 110, windspeed = 7.7) # Watts ## [1] 6377710 8.3 Functions with conditionals In the examples above, we change input values, but what the function does doesn’t change based on those input values. Sometimes, we’ll want our function to do something different (e.g. a different calculation, use a different constant value) based on the input values. 8.4 Functions with iteration 8.5 Useful function features 8.6 Testing functions 8.7 Iterating functions 8.8 Resources on building, testing, &amp; documenting functions Ch. 6 - Functions in Advanced R by Hadley Wickham "],["tidydata.html", "Chapter 9 Tidy data", " Chapter 9 Tidy data "],["tidyverse.html", "Chapter 10 Data wrangling &amp; viz in the tidyverse", " Chapter 10 Data wrangling &amp; viz in the tidyverse "],["troubleshooting.html", "Chapter 11 Troubleshooting", " Chapter 11 Troubleshooting "],["references.html", "References", " References Coelingh, J. P., A. J. M. van Wijk, and A. A. M. Holtslag. 1998. “Analysis of Wind Speed Observations on the North Sea Coast.” Journal of Wind Engineering and Industrial Aerodynamics 73 (2): 125–44. https://doi.org/10.1016/S0167-6105(97)00285-7. Peyton, K. A., T. S. Sakihara, L. K. Nishiura, T. T. Shindo, T. E. Shimoda, S. Hau, A. Akiona, and K. Lorance. 2016. “Length–Weight Relationships for Common Juvenile Fishes and Prey Species in Hawaiian Estuaries.” Journal of Applied Ichthyology 32 (3): 499–502. https://doi.org/10.1111/jai.12957. "]]
